{% extends 'base.html' %}

{% block title %}PRS - Salesperson Dashboard{% endblock %}

{% block content %}
<!-- Navigation Tabs -->
<ul class="nav nav-tabs mb-4">
    <li class="nav-item">
        <a class="nav-link active" id="deals-tab" data-bs-toggle="tab" href="#deals-content">My Deals</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="projects-tab" data-bs-toggle="tab" href="#projects-content">My Projects</a>
    </li>
</ul>

<!-- Tab Content -->
<div class="tab-content">
    <!-- Deals Tab -->
    <div class="tab-pane fade show active" id="deals-content">
        <div class="row mb-4">
            <div class="col-md-8">
                <h2>My Deals</h2>
            </div>
            <div class="col-md-4 text-end">
                <button class="btn btn-primary" onclick="showCreateDealModal()">
                    <i class="bi bi-plus-circle"></i> Create Deal
                </button>
            </div>
        </div>

<!-- Deal List -->
<div class="card shadow mb-4">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold">All Deals</h6>
        <div class="dropdown">
            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown">
                Filter by Status
            </button>
            <ul class="dropdown-menu" aria-labelledby="filterDropdown">
                <li><a class="dropdown-item" href="#" onclick="filterDeals('all')">All Deals</a></li>
                <li><a class="dropdown-item" href="#" onclick="filterDeals('draft')">Draft</a></li>
                <li><a class="dropdown-item" href="#" onclick="filterDeals('pending_verification')">Pending Verification</a></li>
                <li><a class="dropdown-item" href="#" onclick="filterDeals('verified')">Verified</a></li>
                <li><a class="dropdown-item" href="#" onclick="filterDeals('rejected')">Rejected</a></li>
            </ul>
        </div>
    </div>
    <div class="card-body">
        {% if deals %}
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Client</th>
                        <th>Budget</th>
                        <th>Status</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="dealTableBody">
                    {% for deal in deals %}
                    <tr class="deal-row" data-status="{{ deal.status }}">
                        <td>{{ deal.title }}</td>
                        <td>{{ deal.client_name }}</td>
                        <td>${{ deal.budget }}</td>
                        <td>
                            {% if deal.status == 'draft' %}
                            <span class="badge bg-secondary">Draft</span>
                            {% elif deal.status == 'pending_verification' %}
                            <span class="badge bg-warning text-dark">Pending</span>
                            {% elif deal.status == 'verified' %}
                            <span class="badge bg-success">Verified</span>
                            {% elif deal.status == 'rejected' %}
                            <span class="badge bg-danger">Rejected</span>
                            {% else %}
                            <span class="badge bg-info">{{ deal.status }}</span>
                            {% endif %}
                        </td>
                        <td>{{ deal.created_at|date:"M d, Y" }}</td>
                        <td>
                            <button class="btn btn-sm btn-info" onclick="viewDealDetails('{{ deal.id }}')">View</button>
                            {% if deal.status == 'draft' %}
                            <button class="btn btn-sm btn-warning" onclick="editDeal('{{ deal.id }}')">Edit</button>
                            <button class="btn btn-sm btn-success" onclick="submitForVerification('{{ deal.id }}')">Submit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteDeal('{{ deal.id }}')">Delete</button>
                            {% elif deal.status == 'rejected' %}
                            <button class="btn btn-sm btn-warning" onclick="editDeal('{{ deal.id }}')">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteDeal('{{ deal.id }}')">Delete</button>
                            {% elif deal.status == 'verified' %}
                            <button class="btn btn-sm btn-primary" onclick="manageProjects('{{ deal.id }}')">Projects</button>
                            {% endif %}
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {% else %}
        <p class="text-center">No deals found. Create your first deal to get started.</p>
        {% endif %}
    </div>
</div>
    </div>
    
    <!-- Projects Tab -->
    <div class="tab-pane fade" id="projects-content">
        <div class="row mb-4">
            <div class="col-md-8">
                <h2>My Projects</h2>
            </div>
            <div class="col-md-4 text-end">
                <button class="btn btn-primary" onclick="showFileUploadModal()">
                    <i class="bi bi-cloud-upload"></i> Upload Files
                </button>
            </div>
        </div>
        
        <!-- Project Filter Controls -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold">Project Files Management</h6>
            </div>
            <div class="card-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="input-group">
                            <select class="form-select" id="projectSelectFilter" onchange="filterProjectFiles()">
                                <option value="all">All Projects</option>
                                <!-- Projects will be loaded dynamically -->
                            </select>
                            <button class="btn btn-outline-secondary" onclick="loadProjects()">
                                <i class="bi bi-arrow-clockwise"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" class="form-control" id="fileSearchInput" placeholder="Search files..." onkeyup="filterProjectFiles()">
                            <button class="btn btn-outline-secondary" type="button" onclick="filterProjectFiles()">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Files List -->
                <div id="projectFilesContainer">
                    <div class="text-center py-5" id="loadingFiles">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading project files...</p>
                    </div>
                    
                    <div id="noFilesMessage" class="alert alert-info text-center" style="display: none;">
                        <p class="mb-0">No project files found. Use the "Upload Files" button to add files to your projects.</p>
                    </div>
                    
                    <div id="projectFilesList" class="table-responsive" style="display: none;">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>File Name</th>
                                    <th>Project</th>
                                    <th>Upload Date</th>
                                    <th>Size</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="filesTableBody">
                                <!-- Files will be loaded dynamically -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Deal Modal -->
<div class="modal fade" id="createDealModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Deal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="createDealForm" method="post" action="/api/deals/create/" enctype="multipart/form-data">
                    {% csrf_token %}
                    <input type="hidden" name="created_by" value="{{ username }}">
                    <input type="hidden" id="projects_data" name="projects_data" value="[]">
                    
                    <!-- Deal Information Section -->
                    <div class="card mb-4">
                        <div class="card-header bg-primary bg-opacity-10">
                            <h6 class="mb-0">Deal Information</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label for="title" class="form-label">Deal Title</label>
                                <input type="text" class="form-control" id="title" name="title" required>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="client_name" class="form-label">Client Name</label>
                                        <input type="text" class="form-control" id="client_name" name="client_name" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="contact_info" class="form-label">Contact Information</label>
                                        <input type="text" class="form-control" id="contact_info" name="contact_info" placeholder="Phone or email" required>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <textarea class="form-control" id="description" name="description" rows="2" placeholder="Brief description of the deal"></textarea>
                                <div class="form-text">Optional - provide any additional context about the deal</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Financial Information Section -->
                    <div class="card mb-4">
                        <div class="card-header bg-success bg-opacity-10">
                            <h6 class="mb-0">Financial Information</h6>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="budget" class="form-label">Total Budget ($)</label>
                                        <input type="number" step="0.01" class="form-control" id="budget" name="budget" required>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="advance_payment" class="form-label">Advance Payment ($)</label>
                                        <input type="number" step="0.01" class="form-control" id="advance_payment" name="advance_payment" value="0">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="requirements" class="form-label">Requirements</label>
                                <textarea class="form-control" id="requirements" name="requirements" rows="3" placeholder="Specific financial requirements or terms"></textarea>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Project Configuration Section -->
                    <div class="card mb-4">
                        <div class="card-header bg-info bg-opacity-10">
                            <h6 class="mb-0">Project Configuration</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Project Type</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="is_multiproject" id="single_project" value="false" onchange="toggleProjectsSection()">
                                    <label class="form-check-label" for="single_project">
                                        Single Project
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="is_multiproject" id="multi_project" value="true" onchange="toggleProjectsSection()">
                                    <label class="form-check-label" for="multi_project">
                                        Multiple Projects
                                    </label>
                                </div>
                                <div class="form-text">Every deal requires at least one project. Select "Multiple Projects" only if this deal will have more than one project.</div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Projects Section (initially hidden) -->
                    <div id="projectsSection" class="card mb-4 d-none">
                        <div class="card-header bg-info bg-opacity-10">
                            <h6 class="mb-0">Project Details</h6>
                        </div>
                        <div class="card-body">
                            <div id="projectsList" class="mb-3">
                                <!-- Projects will be added here dynamically -->
                                <div class="alert alert-info">
                                    <p class="mb-0">Add your first project using the button below.</p>
                                </div>
                            </div>
                            
                            <div class="d-grid gap-2 d-md-flex justify-content-md-center" id="addProjectButtonContainer">
                                <button type="button" class="btn btn-primary" onclick="showAddProjectForm()">
                                    <i class="bi bi-plus-circle"></i> Add Project
                                </button>
                            </div>
                            
                            <!-- Add Project Form (initially hidden) -->
                            <div id="addProjectForm" class="mt-4 d-none">
                                <!-- Project Basic Information -->
                                <div class="card mb-3">
                                    <div class="card-header bg-primary bg-opacity-10">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <h6 class="mb-0">Project Basic Information</h6>
                                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="toggleAddProjectForm(false)">
                                                <i class="bi bi-x"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div class="row mb-3">
                                            <div class="col-md-6">
                                                <label for="new_project_name" class="form-label">Project Name</label>
                                                <input type="text" class="form-control" id="new_project_name" name="new_project_name" placeholder="Enter project name" data-required="true">
                                            </div>
                                            <div class="col-md-6">
                                                <label for="new_project_supervisor" class="form-label">Assign Supervisor</label>
                                                <select class="form-select" id="new_project_supervisor" name="new_project_supervisor" data-required="true">
                                                    <option value="">Select a supervisor</option>
                                                    {% for supervisor in supervisors %}
                                                    <option value="{{ supervisor.username }}">{{ supervisor.username }}</option>
                                                    {% endfor %}
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Project Timeline and Requirements -->
                                <div class="card mb-3">
                                    <div class="card-header bg-success bg-opacity-10">
                                        <h6 class="mb-0">Timeline and Requirements</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row mb-3">
                                            <div class="col-md-6">
                                                <label for="new_project_deadline" class="form-label">Project Deadline</label>
                                                <input type="date" class="form-control" id="new_project_deadline" name="new_project_deadline" data-required="true">
                                            </div>
                                            <div class="col-12">
                                                <label for="new_project_description" class="form-label">Project Requirements</label>
                                                <textarea class="form-control" id="new_project_description" name="new_project_description" rows="3" placeholder="Detailed project requirements and description"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Project Files -->
                                <div class="card mb-3">
                                    <div class="card-header bg-warning bg-opacity-10">
                                        <h6 class="mb-0">Project Files</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label for="new_project_files" class="form-label">Upload Files</label>
                                            <input type="file" class="form-control" id="new_project_files" name="new_project_files" multiple>
                                            <div class="form-text">
                                                <i class="bi bi-info-circle"></i> You can upload multiple files. Supported formats: PDF, DOC, DOCX, images, and ZIP files.
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Action Buttons -->
                                <div class="d-grid gap-2 d-md-flex justify-content-md-end mb-3">
                                    <button type="button" class="btn btn-secondary" onclick="toggleAddProjectForm(false)">
                                        <i class="bi bi-x-circle"></i> Cancel
                                    </button>
                                    <button type="button" class="btn btn-primary" onclick="addProjectToList()">
                                        <i class="bi bi-plus-circle"></i> Add Project
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="receipt" class="form-label">Receipt Upload</label>
                        <input type="file" class="form-control" id="receipt" name="receipt">
                        <div class="form-text">Upload payment receipt (PDF or image)</div>
                    </div>
                    
                    <!-- Hidden input to store projects data as JSON -->
                    <input type="hidden" id="projects_data" name="projects_data" value="[]">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createDeal()">Create Deal</button>
            </div>
        </div>
    </div>
</div>

<!-- Deal Details Modal -->
<div class="modal fade" id="dealDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Deal Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="dealDetailsContent">
                    <!-- Content loaded dynamically -->
                </div>
            </div>
            <div class="modal-footer">
                <button id="submitDealBtn" type="button" class="btn btn-success" onclick="submitDealFromModal()">Submit for Verification</button>
                <button id="editDealBtn" type="button" class="btn btn-warning" onclick="editDealFromModal()" style="display: none;">Edit Deal</button>
                <button id="deleteDealBtn" type="button" class="btn btn-danger" onclick="deleteDealConfirm()" style="display: none;">Delete Deal</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Deal Modal -->
<div class="modal fade" id="editDealModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Deal</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editDealForm" method="post" enctype="multipart/form-data">
                    {% csrf_token %}
                    <input type="hidden" id="edit_deal_id" name="deal_id" value="">
                    <input type="hidden" name="username" value="{{ username }}">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit_title" class="form-label">Deal Title</label>
                                <input type="text" class="form-control" id="edit_title" name="title" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit_client_name" class="form-label">Client Name</label>
                                <input type="text" class="form-control" id="edit_client_name" name="client_name" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit_budget" class="form-label">Budget ($)</label>
                                <input type="number" class="form-control" id="edit_budget" name="budget" min="0" step="0.01" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit_advance_payment" class="form-label">Advance Payment ($)</label>
                                <input type="number" class="form-control" id="edit_advance_payment" name="advance_payment" min="0" step="0.01" value="0">
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit_contact_info" class="form-label">Contact Information</label>
                                <input type="text" class="form-control" id="edit_contact_info" name="contact_info" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="edit_is_multiproject" class="form-label">Multi-Project Deal</label>
                                <select class="form-select" id="edit_is_multiproject" name="is_multiproject">
                                    <option value="false">No</option>
                                    <option value="true">Yes</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="edit_requirements" class="form-label">Requirements</label>
                        <textarea class="form-control" id="edit_requirements" name="requirements" rows="3"></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label for="edit_description" class="form-label">Description</label>
                        <textarea class="form-control" id="edit_description" name="description" rows="2" placeholder="Brief description of the deal"></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label for="edit_receipt" class="form-label">Update Receipt</label>
                        <input type="file" class="form-control" id="edit_receipt" name="receipt">
                        <div class="form-text">Upload new payment receipt (leave empty to keep existing)</div>
                    </div>
                    
                    <div id="current_receipt_container" class="mb-3 d-none">
                        <p><strong>Current Receipt:</strong> <span id="current_receipt_name"></span></p>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="updateDeal()">Save Changes</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Project Management Modal -->
<div class="modal fade" id="projectManagementModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Manage Projects</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="projectManagementHeader" class="mb-4">
                    <!-- Deal info loaded dynamically -->
                </div>
                
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">Projects</h5>
                    <button type="button" class="btn btn-sm btn-primary" onclick="addNewProject()">
                        <i class="bi bi-plus-circle"></i> Add Project
                    </button>
                </div>
                
                <div id="projectsList" class="mb-4">
                    <!-- Projects loaded dynamically -->
                </div>
                
                <!-- New Project Form -->
                <div id="newProjectForm" class="card mb-3 border-primary d-none">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">Add New Project</h6>
                        <button type="button" class="btn btn-sm btn-light" onclick="toggleNewProjectForm(false)">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div class="card-body">
                        <form id="projectForm">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="project_name" class="form-label">Project Name</label>
                                    <input type="text" class="form-control" id="project_name" required>
                                </div>
                                <div class="col-md-6">
                                    <label for="project_supervisor" class="form-label">Supervisor</label>
                                    <select class="form-select" id="project_supervisor" required>
                                        <option value="">Select a supervisor</option>
                                        <option value="supervisor1">Supervisor 1</option>
                                        <option value="supervisor2">Supervisor 2</option>
                                    </select>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="project_description" class="form-label">Description</label>
                                <textarea class="form-control" id="project_description" rows="3" placeholder="Detailed project description"></textarea>
                            </div>
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label for="project_deadline" class="form-label">Deadline</label>
                                    <input type="date" class="form-control" id="project_deadline">
                                </div>
                                <div class="col-md-6">
                                    <label for="project_additional_fee" class="form-label">Additional Fee ($)</label>
                                    <input type="number" class="form-control" id="project_additional_fee" min="0" step="0.01" value="0" onchange="toggleReceiptRequirement()">
                                    <div id="additional_fee_note" class="form-text">Only applicable for projects added after deal verification</div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="project_files" class="form-label">Project Files</label>
                                <input type="file" class="form-control" id="project_files" multiple>
                                <div class="form-text">Upload project documents (PDF, DOCX, XLSX, etc.)</div>
                            </div>
                            <div id="receipt_file_section" class="mb-3 d-none">
                                <label for="project_receipt_file" class="form-label">Receipt for Additional Fee</label>
                                <input type="file" class="form-control" id="project_receipt_file">
                                <div class="form-text">Required when adding a project with an additional fee</div>
                            </div>
                            <button type="button" class="btn btn-primary" onclick="saveNewProject()">Save Project</button>
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

<!-- Document Preview Modal -->
<div class="modal fade" id="documentPreviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Document Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div id="documentPreviewContent">
                    <!-- Content loaded dynamically -->
                </div>
            </div>
            <div class="modal-footer">
                <a id="downloadDocumentBtn" href="#" class="btn btn-primary" download>Download Document</a>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

{% block extra_js %}
<script>
    let currentDealId = null;
    let currentDealData = null;
    let dealProjects = [];
    
    /**
     * Function to handle project management for a deal
     * @param {string} dealId - ID of the deal to manage projects for
     */
    function manageProjects(dealId) {
        currentDealId = dealId;
        
        // Reset the project form
        document.getElementById('projectForm').reset();
        toggleNewProjectForm(false);
        
        // Show loading indicator
        document.getElementById('projectsList').innerHTML = `
            <div class="text-center py-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading projects...</p>
            </div>
        `;
        
        // Load deal details
        fetch(`/api/deals/${dealId}/`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.deal) {
                    const deal = data.deal;
                    
                    // Show deal header information
                    document.getElementById('projectManagementHeader').innerHTML = `
                        <div class="card">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">${deal.title}</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <p><strong>Client:</strong> ${deal.client_name}</p>
                                        <p><strong>Status:</strong> <span class="badge bg-success">Verified</span></p>
                                    </div>
                                    <div class="col-md-6">
                                        <p><strong>Created:</strong> ${new Date(deal.created_at).toLocaleDateString()}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    // Check if adding a new project requires additional fee
                    const additionalFeeSection = document.getElementById('project_additional_fee').parentNode;
                    additionalFeeSection.classList.toggle('d-none', !deal.verified);
                    
                    // Load projects for this deal
                    loadDealProjects(dealId);
                } else {
                    document.getElementById('projectManagementHeader').innerHTML = `
                        <div class="alert alert-danger">Error: Could not load deal details</div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error fetching deal:', error);
                document.getElementById('projectManagementHeader').innerHTML = `
                    <div class="alert alert-danger">Error: Could not load deal details</div>
                `;
            });
        
        // Show the modal
        const modal = new bootstrap.Modal(document.getElementById('projectManagementModal'));
        modal.show();
    }
    
    /**
     * Function to load projects for a deal
     * @param {string} dealId - ID of the deal to load projects for
     */
    function loadDealProjects(dealId) {
        // Fetch projects for this deal
        fetch(`/api/projects/?deal_id=${dealId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    dealProjects = data.projects || [];
                    renderProjects();
                } else {
                    document.getElementById('projectsList').innerHTML = `
                        <div class="alert alert-danger">Error: ${data.error}</div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error fetching projects:', error);
                document.getElementById('projectsList').innerHTML = `
                    <div class="alert alert-danger">Error: Could not load projects</div>
                `;
            });
    }
    
    /**
     * Function to render the list of projects
     */
    function renderProjects() {
        const projectsList = document.getElementById('projectsList');
        
        // No projects
        if (dealProjects.length === 0) {
            projectsList.innerHTML = `
                <div class="alert alert-info text-center">
                    <p>No projects found for this deal.</p>
                </div>
            `;
            return;
        }
        
        // Create project cards
        let projectsHtml = '';
        dealProjects.forEach(project => {
            // Format dates
            const deadlineDate = project.deadline ? new Date(project.deadline) : null;
            const formattedDeadline = deadlineDate ? deadlineDate.toLocaleDateString('en-US', {
                year: 'numeric', month: 'long', day: 'numeric'
            }) : 'No deadline set';
            
            // Status badge
            let statusBadge = '';
            switch (project.status) {
                case 'pending':
                    statusBadge = '<span class="badge bg-secondary">Pending</span>';
                    break;
                case 'in_progress':
                    statusBadge = '<span class="badge bg-info">In Progress</span>';
                    break;
                case 'completed':
                    statusBadge = '<span class="badge bg-success">Completed</span>';
                    break;
                default:
                    statusBadge = '<span class="badge bg-secondary">Unknown</span>';
            }
            
            projectsHtml += `
                <div class="card mb-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">${project.name}</h6>
                        ${statusBadge}
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <p class="mb-2">${project.description || 'No description provided'}</p>
                                <p class="mb-2"><strong>Deadline:</strong> ${formattedDeadline}</p>
                                <p class="mb-2"><strong>Supervisor:</strong> ${project.supervisor || 'Not assigned'}</p>
                                ${project.additional_fee ? `<p class="mb-2"><strong>Additional Fee:</strong> $${project.additional_fee.toFixed(2)}</p>` : ''}
                            </div>
                            <div class="col-md-4 text-end">
                                ${project.files ? `
                                <button class="btn btn-sm btn-outline-primary mb-2" onclick="viewProjectFiles('${project.id}')">
                                    <i class="bi bi-file-earmark"></i> View Files
                                </button>
                                ` : ''}
                                ${project.receipt_file ? `
                                <button class="btn btn-sm btn-outline-info" onclick="viewReceipt('${project.receipt_file}')">
                                    <i class="bi bi-receipt"></i> View Receipt
                                </button>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
        
        projectsList.innerHTML = projectsHtml;
    }
    
    /**
     * Function to show the add new project form
     */
    function addNewProject() {
        // Reset form
        document.getElementById('projectForm').reset();
        
        // Set today as the minimum date for the deadline
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('project_deadline').min = today;
        
        // Show additional fee fields only if the deal is verified
        const isVerified = currentDealData && currentDealData.status === 'verified';
        document.getElementById('receipt_file_section').classList.toggle('d-none', !isVerified);
        
        // Setup event listener for additional fee
        const additionalFeeInput = document.getElementById('project_additional_fee');
        additionalFeeInput.addEventListener('input', handleAdditionalFeeChange);
        
        // Show the form
        toggleNewProjectForm(true);
    }
    
    /**
     * Function to toggle visibility of the new project form
     * @param {boolean} show - Whether to show or hide the form
     */
    function toggleNewProjectForm(show) {
        document.getElementById('newProjectForm').classList.toggle('d-none', !show);
    }
    
    /**
     * Function to handle changes to the additional fee input
     */
    function handleAdditionalFeeChange() {
        const additionalFee = parseFloat(document.getElementById('project_additional_fee').value) || 0;
        const receiptSection = document.getElementById('receipt_file_section');
        
        // Show receipt upload section if additional fee is greater than 0
        if (additionalFee > 0) {
            receiptSection.classList.remove('d-none');
            document.getElementById('project_receipt_file').setAttribute('required', 'required');
        } else {
            receiptSection.classList.add('d-none');
            document.getElementById('project_receipt_file').removeAttribute('required');
        }
    }
    
    /**
     * Function to save a new project
     */
    function saveNewProject() {
        // Validate form
        const projectName = document.getElementById('project_name').value.trim();
        const projectSupervisor = document.getElementById('project_supervisor').value;
        const projectDescription = document.getElementById('project_description').value.trim();
        const projectDeadline = document.getElementById('project_deadline').value;
        const projectFiles = document.getElementById('project_files').files;
        const additionalFee = parseFloat(document.getElementById('project_additional_fee').value) || 0;
        const receiptFile = document.getElementById('project_receipt_file').files[0];
        
        // Basic validation
        if (!projectName) {
            alert('Please enter a project name');
            return;
        }
        
        if (!projectSupervisor) {
            alert('Please select a supervisor');
            return;
        }
        
        // Validate receipt if additional fee is provided
        if (additionalFee > 0 && !receiptFile) {
            alert('Please upload a receipt for the additional fee');
            return;
        }
        
        // Create form data
        const formData = new FormData();
        formData.append('name', projectName);
        formData.append('deal_id', currentDealId);
        formData.append('supervisor', projectSupervisor);
        formData.append('description', projectDescription);
        
        if (projectDeadline) {
            formData.append('deadline', projectDeadline);
        }
        
        if (additionalFee > 0) {
            formData.append('additional_fee', additionalFee);
        }
        
        // Add all files
        if (projectFiles && projectFiles.length > 0) {
            for (let i = 0; i < projectFiles.length; i++) {
                formData.append('files', projectFiles[i]);
            }
        }
        
        // Add receipt file if present
        if (receiptFile) {
            formData.append('receipt_file', receiptFile);
        }
        
        // Show loading state
        const saveButton = document.querySelector('#projectForm button[type="button"]');
        saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
        saveButton.disabled = true;
        
        // Send API request
        fetch('/api/projects/create/', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Project created successfully!');
                
                // Reset form and hide it
                document.getElementById('projectForm').reset();
                toggleNewProjectForm(false);
                
                // Reload projects
                loadDealProjects(currentDealId);
            } else {
                alert('Error: ' + (data.error || 'Could not create project'));
            }
        })
        .catch(error => {
            console.error('Error creating project:', error);
            alert('An error occurred while creating the project.');
        })
        .finally(() => {
            // Reset button state
            saveButton.innerHTML = 'Save Project';
            saveButton.disabled = false;
        });
    }
    
    /**
     * Function to view project files
     * @param {string} projectId - ID of the project
     */
    function viewProjectFiles(projectId) {
        // Find project
        const project = dealProjects.find(p => p.id === projectId);
        if (!project || !project.files) {
            alert('No files found for this project.');
            return;
        }
        
        // In a production environment, this would make an API call to list files
        // For demonstration, we'll show a message about accessing files
        alert('In a production environment, this would show the list of files in the project directory: ' + project.files);
    }
    
    /**
     * Function to view receipt
     * @param {string} receiptPath - Path to the receipt file
     */
    function viewReceipt(receiptPath) {
        if (!receiptPath) {
            alert('Receipt file not found.');
            return;
        }
        
        // Set document preview content
        const previewContainer = document.getElementById('documentPreviewContent');
        const downloadBtn = document.getElementById('downloadDocumentBtn');
        
        // Check file type
        const fileExtension = receiptPath.split('.').pop().toLowerCase();
        const isImage = ['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension);
        const isPdf = fileExtension === 'pdf';
        
        if (isImage) {
            previewContainer.innerHTML = `<img src="${receiptPath}" class="img-fluid" alt="Receipt">`;
        } else if (isPdf) {
            previewContainer.innerHTML = `
                <div class="ratio ratio-16x9">
                    <iframe src="${receiptPath}" allowfullscreen></iframe>
                </div>
            `;
        } else {
            previewContainer.innerHTML = `
                <div class="alert alert-info">
                    <p>This file type cannot be previewed in the browser.</p>
                </div>
            `;
        }
        
        // Set download link
        downloadBtn.href = receiptPath;
        
        // Show the preview modal
        const modal = new bootstrap.Modal(document.getElementById('documentPreviewModal'));
        modal.show();
    }
    
    /**
     * Function to toggle the projects section visibility based on multi-project selection
     */
    function toggleProjectsSection() {
        // Check if any radio is checked, if not select one based on projects
        if (!document.getElementById('single_project').checked && !document.getElementById('multi_project').checked) {
            // Default selection - if we already have multiple projects, select multi
            let projectsData = [];
            try {
                const currentData = document.getElementById('projects_data').value;
                if (currentData) {
                    projectsData = JSON.parse(currentData);
                }
            } catch (e) {
                console.error('Error parsing projects data:', e);
            }
            
            // If we have more than one project, select multi-project
            if (projectsData.length > 1) {
                document.getElementById('multi_project').checked = true;
            } else {
                // Otherwise, select single project if no selection made
                document.getElementById('single_project').checked = true;
            }
        }
        
        const isMultiProject = document.getElementById('multi_project').checked;
        const projectsSection = document.getElementById('projectsSection');
        const projectsSectionTitle = document.querySelector('#projectsSection .card-header h6');
        const addProjectButtonContainer = document.getElementById('addProjectButtonContainer');
        
        // Always check if project data suggests multi-project
        let projectsData = [];
        try {
            const currentData = document.getElementById('projects_data').value;
            if (currentData) {
                projectsData = JSON.parse(currentData);
            }
        } catch (e) {
            console.error('Error parsing projects data:', e);
        }
        
        // If user has added multiple projects but selected single project, auto-switch to multi-project
        if (!isMultiProject && projectsData.length > 1) {
            document.getElementById('multi_project').checked = true;
            // Recursively call this function to handle the change
            toggleProjectsSection();
            return;
        }
        
        if (isMultiProject) {
            // Show multi-project interface
            projectsSection.classList.remove('d-none');
            projectsSectionTitle.textContent = 'Multiple Projects';
            document.querySelector('#projectsList .alert p').textContent = 'Add your first project using the button below.';
            
            // Show add project button for multi-project deals
            addProjectButtonContainer.classList.remove('d-none');
            
            // Close project form if open
            toggleAddProjectForm(false);
        } else {
            // For single project, show a simplified interface
            projectsSection.classList.remove('d-none'); // Always show, even for single project
            projectsSectionTitle.textContent = 'Project Details (Required)';
            document.querySelector('#projectsList .alert p').textContent = 'Every deal requires at least one project. Please complete the project details below.';
            
            // Hide add project button for single project deals
            addProjectButtonContainer.classList.add('d-none');
            
            // Reset existing projects data only if there are multiple projects
            if (projectsData.length > 1) {
                resetProjectsData();
            }
            
            // Automatically show the add project form for single project deals
            showAddProjectForm();
        }
    }
    
    /**
     * Function to show the Add Project form
     */
    function showAddProjectForm() {
        // Set minimum date for deadline
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('new_project_deadline').min = today;
        
        // Show the form and enable required attributes
        const form = document.getElementById('addProjectForm');
        form.classList.remove('d-none');
        
        // Make fields required when form is shown
        form.querySelectorAll('input, select, textarea').forEach(el => {
            if (el.hasAttribute('data-required')) {
                el.setAttribute('required', '');
            }
        });
    }
    
        // Always check if project data suggests multi-project
        let projectsData = [];
        try {
            const currentData = document.getElementById('projects_data').value;
            if (currentData) {
                projectsData = JSON.parse(currentData);
            }
        } catch (e) {
            console.error('Error parsing projects data:', e);
        }
        
        // If user has added multiple projects but selected single project, auto-switch to multi-project
        if (!isMultiProject && projectsData.length > 1) {
            document.getElementById('multi_project').checked = true;
            // Recursively call this function to handle the change
            toggleProjectsSection();
            return;
        }
        
        if (isMultiProject) {
            // Show multi-project interface
            projectsSection.classList.remove('d-none');
            projectsSectionTitle.textContent = 'Multiple Projects';
            document.querySelector('#projectsList .alert p').textContent = 'Add your first project using the button below.';
            
            // Show add project button for multi-project deals
            addProjectButtonContainer.classList.remove('d-none');
            
            // Close project form if open
            toggleAddProjectForm(false);
        } else {
            // For single project, show a simplified interface
            projectsSection.classList.remove('d-none'); // Always show, even for single project
            projectsSectionTitle.textContent = 'Project Details (Required)';
            document.querySelector('#projectsList .alert p').textContent = 'Every deal requires at least one project. Please complete the project details below.';
            
            // Hide add project button for single project deals
            addProjectButtonContainer.classList.add('d-none');
            
            // Reset existing projects data only if there are multiple projects
            if (projectsData.length > 1) {
                resetProjectsData();
            }
            
            // Automatically show the add project form for single project deals
            showAddProjectForm();
        }
}

/**
 * Function to show the Add Project form
 */
function showAddProjectForm() {
    // Set minimum date for deadline
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('new_project_deadline').min = today;
    
    // Show the form and enable required attributes
    const form = document.getElementById('addProjectForm');
    form.classList.remove('d-none');
    
    // Make fields required when form is shown
    form.querySelectorAll('input, select, textarea').forEach(el => {
        if (el.hasAttribute('data-required')) {
            el.setAttribute('required', '');
        }
    });
}

/**
 * Function to add a project to the list with file handling
 */
function addProjectToList() {
    // Temporarily add required attributes for validation
    const form = document.getElementById('addProjectForm');
    const requiredFields = form.querySelectorAll('[data-required="true"]');
    requiredFields.forEach(field => {
        field.setAttribute('required', '');
    });
    
    // Get form data
    const projectName = document.getElementById('new_project_name').value.trim();
    const projectSupervisor = document.getElementById('new_project_supervisor').value;
    const projectDescription = document.getElementById('new_project_description').value.trim();
    const projectDeadline = document.getElementById('new_project_deadline').value;
    
    // Form validation
    if (!projectName || !projectSupervisor || !projectDeadline) {
        // Use browser's built-in validation
        const invalidField = form.querySelector(':invalid');
        if (invalidField) {
            invalidField.focus();
            return;
        }
        
        // Fallback manual validation
        if (!projectName) {
            alert('Project name is required');
            return;
        }
        if (!projectSupervisor) {
            alert('Please select a supervisor');
            return;
        }
        if (!projectDeadline) {
            alert('Project deadline is required');
            return;
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                
                // Validate file type
                const fileExt = file.name.split('.').pop().toLowerCase();
                const validExts = ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'gif', 'zip'];
                
                if (!validExts.includes(fileExt)) {
                    alert(`File type .${fileExt} is not supported. Please upload PDF, DOC, DOCX, images or ZIP files.`);
                    return;
                }
                
                // Add file info
                filesList.push({
                    name: file.name,
                    type: file.type,
                    size: file.size,
                    lastModified: file.lastModified
                });
            }
        }
        
        // Create project object with files
        const project = {
            id: 'temp_' + Date.now(),
            name: name,
            supervisor: supervisor,
            description: description,
            deadline: deadline,
            files: filesList
        };
        
        // Add to the projects list
        let projectsData = [];
        try {
            const currentData = document.getElementById('projects_data').value;
            if (currentData) {
                projectsData = JSON.parse(currentData);
            }
        } catch (e) {
            console.error('Error parsing projects data:', e);
        }
        
        projectsData.push(project);
        document.getElementById('projects_data').value = JSON.stringify(projectsData);
        
        // Display in the project list
        renderProjectsList(projectsData);
        
        // Clear form
        document.getElementById('new_project_name').value = '';
        document.getElementById('new_project_supervisor').value = '';
        document.getElementById('new_project_description').value = '';
        document.getElementById('new_project_deadline').value = '';
        if (document.getElementById('new_project_files')) {
            document.getElementById('new_project_files').value = '';
        }
        
        // Hide the form
        toggleAddProjectForm(false);
    }
    
    /**
     * Function to toggle the add project form visibility
     * @param {boolean} show - Whether to show or hide the form
     */
    function toggleAddProjectForm(show) {
        document.getElementById('addProjectForm').classList.toggle('d-none', !show);
        
        if (show) {
            // Reset form fields
            document.getElementById('new_project_name').value = '';
            document.getElementById('new_project_supervisor').selectedIndex = 0;
            document.getElementById('new_project_description').value = '';
            document.getElementById('new_project_deadline').value = '';
            
            if (document.getElementById('new_project_files')) {
                document.getElementById('new_project_files').value = '';
            }
            
            // Enable required attributes when form is shown
            const requiredFields = document.getElementById('addProjectForm').querySelectorAll('[required]');
            requiredFields.forEach(field => {
                field.setAttribute('required', '');
            });
        } else {
            // Disable required attributes when form is hidden
            const requiredFields = document.getElementById('addProjectForm').querySelectorAll('[required]');
            requiredFields.forEach(field => {
                field.removeAttribute('required');
            });
        }
    }
    
    /**
     * Function to render the list of projects in the create deal form
     * @param {Array} projectsData - Array of project objects
     */
    function renderProjectsList(projectsData) {
        const projectsList = document.getElementById('projectsList');
        
        if (!projectsData || projectsData.length === 0) {
            projectsList.innerHTML = `
                <div class="alert alert-info">
                    <p class="mb-0">Add your first project using the button below.</p>
                </div>
            `;
            return;
        }
        
        let projectsHtml = '';
        projectsData.forEach((project, index) => {
            // Format deadline if available
            const deadline = project.deadline ? new Date(project.deadline).toLocaleDateString() : 'Not set';
            
            // Handle files display if any
            let filesHtml = '';
            if (project.files && project.files.length > 0) {
                filesHtml = `
                <div class="mt-2 pt-2 border-top">
                    <p class="mb-1"><small><strong>Files:</strong> (${project.files.length})</small></p>
                    <div class="d-flex flex-wrap gap-1">
                `;
                
                project.files.forEach(file => {
                    // Determine icon based on file type
                    let icon = 'bi-file';
                    const fileExt = file.name.split('.').pop().toLowerCase();
                    
                    if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExt)) {
                        icon = 'bi-file-image';
                    } else if (fileExt === 'pdf') {
                        icon = 'bi-file-pdf';
                    } else if (['doc', 'docx'].includes(fileExt)) {
                        icon = 'bi-file-word';
                    } else if (fileExt === 'zip') {
                        icon = 'bi-file-zip';
                    }
                    
                    // Format file size
                    const fileSize = file.size < 1024 * 1024 
                        ? Math.round(file.size / 1024) + ' KB' 
                        : Math.round(file.size / (1024 * 1024) * 10) / 10 + ' MB';
                    
                    filesHtml += `
                    <span class="badge bg-light text-dark border d-inline-flex align-items-center">
                        <i class="bi ${icon} me-1"></i>
                        ${file.name} (${fileSize})
                    </span>
                    `;
                });
                
                filesHtml += '</div></div>';
            }
            
            projectsHtml += `
                <div class="card mb-2 project-item" data-project-id="${project.id}">
                    <div class="card-header d-flex justify-content-between align-items-center py-2">
                        <h6 class="mb-0">${project.name}</h6>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeProject('${project.id}')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <div class="card-body py-2">
                        <div class="row">
                            <div class="col-md-6">
                                <p class="mb-1"><small><strong>Supervisor:</strong> ${project.supervisor}</small></p>
                                <p class="mb-1"><small><strong>Deadline:</strong> ${deadline}</small></p>
                            </div>
                            <div class="col-md-6">
                                <p class="mb-0"><small>${project.description || 'No description'}</small></p>
                            </div>
                        </div>
                        ${filesHtml}
                    </div>
                </div>
            `;
        });
        
        projectsList.innerHTML = projectsHtml;
    }
    
    /**
     * Function to remove a project from the list
     * @param {string} projectId - ID of the project to remove
     */
    function removeProject(projectId) {
        if (!confirm('Are you sure you want to remove this project?')) {
            return;
        }
        
        // Get current projects array
        let projectsData = [];
        try {
            projectsData = JSON.parse(document.getElementById('projects_data').value);
        } catch (e) {
            return;
        }
        
        // Remove the project
        projectsData = projectsData.filter(project => project.id !== projectId);
        
        // Update hidden field
        document.getElementById('projects_data').value = JSON.stringify(projectsData);
        
        // Update UI
        renderProjectsList(projectsData);
    }
    
    /**
     * Function to reset projects data
     */
    function resetProjectsData() {
        document.getElementById('projects_data').value = '[]';
        renderProjectsList([]);
    }
    
    /**
     * Function to show the create deal modal
     */
    function showCreateDealModal() {
        const createDealModal = new bootstrap.Modal(document.getElementById('createDealModal'));
        createDealModal.show();
    }
    
    /**
     * Function to handle deal creation with project data
     */
    function createDeal() {
        const form = document.getElementById('createDealForm');
        
        // Temporarily remove required attribute from hidden fields
        const hiddenRequiredFields = [];
        const projectForm = document.getElementById('addProjectForm');
        if (projectForm.classList.contains('d-none')) {
            const fields = projectForm.querySelectorAll('[required]');
            fields.forEach(field => {
                hiddenRequiredFields.push(field);
                field.removeAttribute('required');
            });
        }
        
        const formData = new FormData(form);
        
        // Form validation
        if (!form.checkValidity()) {
            form.reportValidity();
            
            // Restore required attributes
            hiddenRequiredFields.forEach(field => {
                field.setAttribute('required', '');
            });
            return;
        }
        
        // Restore required attributes
        hiddenRequiredFields.forEach(field => {
            field.setAttribute('required', '');
        });
        
        // Check if it's a multi-project deal
        const isMultiProject = document.getElementById('is_multiproject').value === 'true';
        
        // Get projects data from hidden field
        let projectsData = [];
        try {
            projectsData = JSON.parse(document.getElementById('projects_data').value);
        } catch (e) {
            projectsData = [];
        }
        
        // Every deal must have at least one project
        if (projectsData.length === 0) {
            // If the add project form is visible, try to get data from it and add it
            if (!document.getElementById('addProjectForm').classList.contains('d-none')) {
                const projectName = document.getElementById('new_project_name').value.trim();
                const projectSupervisor = document.getElementById('new_project_supervisor').value;
                const projectDescription = document.getElementById('new_project_description').value.trim();
                const projectDeadline = document.getElementById('new_project_deadline').value;
                
                // If fields are filled out, add this as a project
                if (projectName && projectSupervisor) {
                    const newProject = {
                        name: projectName,
                        supervisor: projectSupervisor,
                        description: projectDescription,
                        deadline: projectDeadline,
                        id: 'temp_' + Date.now() // Temporary ID for frontend reference
                    };
                    
                    // Add the project to the form data
                    projectsData.push(newProject);
                    document.getElementById('projects_data').value = JSON.stringify(projectsData);
                } else {
                    alert('Please complete the project details form. Every deal requires at least one project.');
                    return;
                }
            } else {
                alert('Every deal requires at least one project. Please add at least one project before creating the deal.');
                // Automatically show the project form
                toggleAddProjectForm(true);
                return;
            }
        }
        
        // Verify each project has a supervisor and name
        for (const project of projectsData) {
            if (!project.name) {
                alert('All projects must have a name.');
                return;
            }
            if (!project.supervisor) {
                alert('All projects must have a supervisor assigned.');
                return;
            }
        }
        
        // Log projects data being submitted
        console.log('Submitting projects with deal:', projectsData);
        
        // Show loading indicator
        const submitBtn = document.querySelector('.modal-footer .btn-primary');
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';
        submitBtn.disabled = true;
        
        // Submit form data
        fetch('/api/deals/create/', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Deal created successfully!' + (data.projects && data.projects.length > 0 ? ' ' + data.projects.length + ' projects were also created.' : ''));
                window.location.reload();
            } else {
                alert('Error: ' + data.error);
                submitBtn.innerHTML = originalBtnText;
                submitBtn.disabled = false;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while creating the deal.');
            submitBtn.innerHTML = originalBtnText;
            submitBtn.disabled = false;
        });
    }
    
    /**
     * Function to view deal details
     * @param {string} dealId - The ID of the deal to view
     */
    function viewDealDetails(dealId) {
        console.log('Viewing deal with ID:', dealId);
        currentDealId = dealId;
        
        // Show loading indicator in a modal first
        const loadingContent = `
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <p class="text-center mt-3">Loading deal details...</p>
        `;
        
        document.getElementById('dealDetailsContent').innerHTML = loadingContent;
        const dealDetailsModal = new bootstrap.Modal(document.getElementById('dealDetailsModal'));
        dealDetailsModal.show();
        
        // Now fetch the deal data
        fetch(`/api/deals/${dealId}/`)
        .then(response => {
            if (!response.ok) {
                // If single deal fetch fails, try getting all deals
                return fetch(`/api/deals/?username={{ username }}&role={{ role }}&status=all`);
            }
            return response;
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('Deal data received:', data);
            
            // Check if we got a direct deal response or a list
            let deal = null;
            
            if (data.deal) {
                // Direct deal response from single deal endpoint
                console.log('Found deal directly:', data.deal);
                deal = data.deal;
            } else if (data.success && data.deals && Array.isArray(data.deals)) {
                // List response - try to find the deal
                console.log('Searching for deal in list of', data.deals.length, 'deals');
                
                // Try exact match
                deal = data.deals.find(d => d.id === dealId);
                
                // Try string comparison
                if (!deal) {
                    deal = data.deals.find(d => String(d.id) === String(dealId));
                }
                
                // Try with toString (as a last resort)
                if (!deal) {
                    deal = data.deals.find(d => {
                        if (!d.id) return false;
                        return d.id.toString() === dealId.toString();
                    });
                }
                
                // Log all available IDs for debugging
                console.log('Available deal IDs:', data.deals.map(d => d.id));
                console.log('Looking for ID:', dealId, 'Type:', typeof dealId);
            } else {
                throw new Error('Invalid response format or API error');
            }
            
            if (deal) {
                console.log('Found matching deal:', deal);
                currentDealData = deal; // Store current deal data
                renderDealDetails(deal);
                
                // Show appropriate action buttons based on deal status
                const submitBtn = document.getElementById('submitDealBtn');
                const editBtn = document.getElementById('editDealBtn');
                const deleteBtn = document.getElementById('deleteDealBtn');
                
                submitBtn.style.display = deal.status === 'draft' ? 'inline-block' : 'none';
                editBtn.style.display = (deal.status === 'draft' || deal.status === 'rejected') ? 'inline-block' : 'none';
                deleteBtn.style.display = (deal.status === 'draft' || deal.status === 'rejected') ? 'inline-block' : 'none';
            } else {
                console.error('Deal not found in response data');
                document.getElementById('dealDetailsContent').innerHTML = `
                    <div class="alert alert-warning">
                        <h5>Deal Not Found</h5>
                        <p>Could not find the deal with ID: ${dealId}</p>
                        <p>This could be because the deal has been processed or removed.</p>
                        <button class="btn btn-primary mt-2" onclick="window.location.reload()">Refresh Page</button>
                    </div>
                `;
            }
        })
        .catch(error => {
            console.error('Error fetching deal details:', error);
            document.getElementById('dealDetailsContent').innerHTML = `
                <div class="alert alert-danger">
                    <h5>Error Loading Deal</h5>
                    <p>${error.message}</p>
                    <button class="btn btn-primary mt-2" onclick="window.location.reload()">Refresh Page</button>
                </div>
            `;
        });
    }
    
    /**
     * Function to render deal details in the modal
     * @param {Object} deal - The deal object to render
     */
    function renderDealDetails(deal) {
        console.log('Rendering deal details for:', deal);
        
        const content = document.getElementById('dealDetailsContent');
        const submitBtn = document.getElementById('submitDealBtn');
        const editBtn = document.getElementById('editDealBtn');
        const deleteBtn = document.getElementById('deleteDealBtn');

        // Format the created date and time
        const createdDate = deal.created_at ? new Date(deal.created_at) : new Date();
        const dateFormatted = createdDate.toLocaleDateString();
        const timeFormatted = createdDate.toLocaleTimeString();
        
        // Show appropriate action buttons based on deal status
        submitBtn.style.display = deal.status === 'draft' ? 'inline-block' : 'none';
        editBtn.style.display = (deal.status === 'draft' || deal.status === 'rejected') ? 'inline-block' : 'none';
        deleteBtn.style.display = (deal.status === 'draft' || deal.status === 'rejected') ? 'inline-block' : 'none';
        
        // Format date for display
        const formattedDate = createdDate.toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        const formattedTime = createdDate.toLocaleTimeString('en-US', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        // Prepare receipt HTML
        let receiptHtml = '';
        if (deal.receipt_file) {
            const fileName = deal.receipt_file.split('/').pop();
            const fileExt = fileName.split('.').pop().toLowerCase();
            const isImage = ['jpg', 'jpeg', 'png', 'gif'].includes(fileExt);
            const isPdf = fileExt === 'pdf';
            
            receiptHtml = `
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h6 class="m-0">Receipt Document</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <div class="me-3">
                                <i class="bi ${isImage ? 'bi-file-image' : isPdf ? 'bi-file-pdf' : 'bi-file-earmark'} fs-1 text-primary"></i>
                            </div>
                            <div>
                                <p class="mb-1"><strong>Filename:</strong> ${fileName}</p>
                                <p class="mb-0"><strong>Type:</strong> ${fileExt.toUpperCase()} ${isImage ? '(Image)' : isPdf ? '(PDF)' : 'File'}</p>
                            </div>
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-primary" onclick="previewDocument('/media/${deal.receipt_file}')">
                                <i class="bi bi-eye"></i> Preview Receipt
                            </button>
                            <a href="/media/${deal.receipt_file}" class="btn btn-outline-primary" download>
                                <i class="bi bi-download"></i> Download Receipt
                            </a>
                        </div>
                    </div>
                </div>
            `;
        } else {
            receiptHtml = `
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h6 class="m-0">Receipt Document</h6>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-warning mb-0">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            <span>No receipt file attached to this deal.</span>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Prepare verification HTML
        let verificationHtml = '';
        if (deal.status === 'verified' || deal.status === 'rejected') {
            verificationHtml = `
                <div class="card mb-4">
                    <div class="card-header bg-light">
                        <h6 class="m-0">Verification Details</h6>
                    </div>
                    <div class="card-body">
                        <p><strong>Verified by:</strong> ${deal.verified_by || 'N/A'}</p>
                        <p><strong>Verification Date:</strong> ${deal.verified_at ? new Date(deal.verified_at).toLocaleString() : 'N/A'}</p>
                        ${deal.rejection_reason ? `
                        <div class="alert alert-danger mt-3">
                            <p class="mb-1"><strong>Rejection Reason:</strong></p>
                            <p class="mb-0">${deal.rejection_reason}</p>
                        </div>` : ''}
                    </div>
                </div>
            `;
        }
        
        // Render the content with all details
        content.innerHTML = `
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="m-0">${deal.title}</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <span class="badge bg-${deal.status === 'draft' ? 'secondary' : deal.status === 'pending_verification' ? 'warning text-dark' : deal.status === 'verified' ? 'success' : 'danger'} p-2">
                            ${deal.status === 'draft' ? 'Draft' : deal.status === 'pending_verification' ? 'Pending Verification' : deal.status === 'verified' ? 'Verified' : 'Rejected'}
                        </span>
                    </div>
                </div>
            </div>
            
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h6 class="m-0">Deal Information</h6>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6>Client Details</h6>
                            <p><strong>Client Name:</strong> ${deal.client_name || 'Not specified'}</p>
                            <p><strong>Contact Info:</strong> ${deal.contact_info || 'Not specified'}</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Financial Details</h6>
                            <p><strong>Budget:</strong> <span class="text-success fw-bold">$${typeof deal.budget === 'number' ? deal.budget.toLocaleString() : deal.budget}</span></p>
                            <p><strong>Advance Payment:</strong> $${deal.advance_payment ? (typeof deal.advance_payment === 'number' ? deal.advance_payment.toLocaleString() : deal.advance_payment) : '0'}</p>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Creation Details</h6>
                            <p><strong>Created By:</strong> ${deal.created_by || 'Unknown'}</p>
                            <p><strong>Created:</strong> ${formattedDate} at ${formattedTime}</p>
                        </div>
                        <div class="col-md-6">
                            <h6>Deal Status</h6>
                            <p><strong>Current Status:</strong> ${deal.status === 'draft' ? 'Draft' : deal.status === 'pending_verification' ? 'Pending Verification' : deal.status === 'verified' ? 'Verified' : 'Rejected'}</p>
                            <p><strong>Deal ID:</strong> <code>${deal.id}</code></p>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card mb-4">
                <div class="card-header bg-light">
                    <h6 class="m-0">Requirements</h6>
                </div>
                <div class="card-body">
                    <div class="p-3 bg-light rounded">
                        ${deal.requirements ? `<p>${deal.requirements}</p>` : '<p class="text-muted">No specific requirements provided for this deal.</p>'}
                    </div>
                </div>
            </div>
            
            ${receiptHtml}
            ${verificationHtml}
        `;
    }
    
    /**
     * Function to submit a deal for verification
     */
    function submitForVerification(dealId) {
        if (!confirm('Are you sure you want to submit this deal for verification?')) {
            return;
        }
        
        fetch(`/api/deals/${dealId}/submit/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Deal submitted for verification successfully!');
                window.location.reload();
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while submitting the deal.');
        });
    }
    
    /**
     * Function to submit deal from the modal
     */
    function submitDealFromModal() {
        if (currentDealId) {
            submitForVerification(currentDealId);
        }
    }
    
    /**
     * Function to filter deals by status
     */
    function filterDeals(status) {
        const rows = document.querySelectorAll('.deal-row');
        rows.forEach(row => {
            const rowStatus = row.getAttribute('data-status');
            if (status === 'all' || rowStatus === status) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });
    }
    
    /**
     * Function to handle editing a rejected deal
     * @param {string} dealId - The ID of the deal to edit
     */
    function editDeal(dealId) {
        currentDealId = dealId;
        
        // Fetch the deal data
        fetch(`/api/deals/?username={{ username }}&role={{ role }}&status=all`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const deal = data.deals.find(d => d.id === dealId);
                if (deal) {
                    currentDealData = deal;
                    
                    // Populate the edit form
                    document.getElementById('edit_deal_id').value = deal.id;
                    document.getElementById('edit_title').value = deal.title;
                    document.getElementById('edit_client_name').value = deal.client_name;
                    document.getElementById('edit_budget').value = deal.budget;
                    document.getElementById('edit_advance_payment').value = deal.advance_payment || 0;
                    document.getElementById('edit_contact_info').value = deal.contact_info || '';
                    document.getElementById('edit_requirements').value = deal.requirements || '';
                    document.getElementById('edit_description').value = deal.description || '';
                    
                    // Set multi-project selection
                    const multiProjectSelect = document.getElementById('edit_is_multiproject');
                    multiProjectSelect.value = deal.is_multiproject ? 'true' : 'false';
                    
                    // Show current receipt if exists
                    if (deal.receipt_file) {
                        document.getElementById('current_receipt_container').classList.remove('d-none');
                        document.getElementById('current_receipt_name').textContent = deal.receipt_file.split('/').pop();
                    } else {
                        document.getElementById('current_receipt_container').classList.add('d-none');
                    }
                    
                    // Show the edit modal
                    const editDealModal = new bootstrap.Modal(document.getElementById('editDealModal'));
                    editDealModal.show();
                } else {
                    alert('Deal not found.');
                }
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while fetching deal details.');
        });
    }
    
    /**
     * Function to update a deal after editing
     */
    function updateDeal() {
        const form = document.getElementById('editDealForm');
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        const formData = new FormData(form);
        formData.append('status', 'draft'); // Reset status to draft
        
        fetch(`/api/deals/${currentDealId}/update/`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Deal updated successfully!');
                window.location.reload();
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while updating the deal.');
        });
    }
    
    /**
     * Function to open edit modal from deal details
     */
    function editDealFromModal() {
        if (currentDealId && currentDealData) {
            const dealDetailsModal = bootstrap.Modal.getInstance(document.getElementById('dealDetailsModal'));
            dealDetailsModal.hide();
            editDeal(currentDealId);
        }
    }
    
    /**
     * Function to confirm deal deletion
     */
    function deleteDealConfirm() {
        if (confirm('Are you sure you want to delete this deal? This action cannot be undone.')) {
            deleteDeal(currentDealId);
        }
    }
    
    /**
     * Function to delete a deal
     * @param {string} dealId - The ID of the deal to delete
     */
    function deleteDeal(dealId) {
        fetch(`/api/deals/${dealId}/delete/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                username: '{{ username }}'
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Deal deleted successfully!');
                window.location.reload();
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while deleting the deal.');
        });
    }
    
    /**
     * Function to open project management modal
     * @param {string} dealId - The ID of the deal to manage projects for
     */
    function manageProjects(dealId) {
        currentDealId = dealId;
        
        // Fetch the deal data and its projects
        fetch(`/api/deals/?username={{ username }}&role={{ role }}&status=all`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const deal = data.deals.find(d => d.id === dealId);
                if (deal) {
                    currentDealData = deal;
                    
                    // Display deal info in header
                    document.getElementById('projectManagementHeader').innerHTML = `
                        <div class="card">
                            <div class="card-body">
                                <h5>${deal.title}</h5>
                                <p><strong>Client:</strong> ${deal.client_name}</p>
                                <p><strong>Budget:</strong> $${deal.budget}</p>
                            </div>
                        </div>
                    `;
                    
                    // Fetch projects for this deal
                    fetchDealProjects(dealId);
                    
                    // Show the projects modal
                    const projectsModal = new bootstrap.Modal(document.getElementById('projectManagementModal'));
                    projectsModal.show();
                } else {
                    alert('Deal not found.');
                }
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while fetching deal details.');
        });
    }
    
    /**
     * Function to fetch projects for a deal
     * @param {string} dealId - The ID of the deal to fetch projects for
     */
    function fetchDealProjects(dealId) {
        fetch(`/api/deals/${dealId}/projects/`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                dealProjects = data.projects || [];
                renderProjects();
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            document.getElementById('projectsList').innerHTML = `
                <div class="alert alert-warning">
                    <p>Error loading projects. Please try again.</p>
                </div>
            `;
        });
    }
    
    /**
     * Function to render the projects list
     */
    function renderProjects() {
        const projectsList = document.getElementById('projectsList');
        
        if (dealProjects.length === 0) {
            projectsList.innerHTML = `
                <div class="alert alert-info">
                    <p>No projects found for this deal. Use the 'Add Project' button to create your first project.</p>
                </div>
            `;
            return;
        }
        
        // Calculate total budget from all projects
        const totalProjectBudget = dealProjects.reduce((sum, project) => sum + (parseFloat(project.budget) || 0), 0);
        
        let projectsHtml = `
            <div class="mb-3">
                <p><strong>Total Project Budget:</strong> $${totalProjectBudget.toFixed(2)}</p>
            </div>
        `;
        
        dealProjects.forEach((project, index) => {
            projectsHtml += `
                <div class="card mb-3 ${project.is_completed ? 'border-success' : ''}">
                    <div class="card-header ${project.is_completed ? 'bg-success text-white' : 'd-flex justify-content-between align-items-center'}">
                        <div class="d-flex justify-content-between w-100">
                            <h6 class="mb-0">${project.name}</h6>
                            <div>
                                <button class="btn btn-sm ${project.is_completed ? 'btn-light' : 'btn-success'}" 
                                        onclick="toggleProjectCompletion(${index}, ${!project.is_completed})">
                                    ${project.is_completed ? '<i class="bi bi-x-circle"></i> Mark Incomplete' : '<i class="bi bi-check-circle"></i> Mark Complete'}
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="removeProject(${index})">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Budget:</strong> $${project.budget}</p>
                                <p><strong>Status:</strong> ${project.is_completed ? '<span class="badge bg-success">Completed</span>' : '<span class="badge bg-warning text-dark">In Progress</span>'}</p>
                            </div>
                            <div class="col-md-6">
                                ${project.receipt_file ? `
                                <p><strong>Receipt:</strong> 
                                    <a href="/media/${project.receipt_file}" target="_blank" class="btn btn-sm btn-outline-primary">View Receipt</a>
                                </p>` : ''}                                
                                ${project.created_at ? `<p><strong>Created:</strong> ${new Date(project.created_at).toLocaleDateString()}</p>` : ''}
                            </div>
                        </div>
                        ${project.description ? `
                        <div class="mt-2">
                            <p><strong>Description:</strong></p>
                            <p>${project.description}</p>
                        </div>` : ''}
                        ${!project.receipt_file ? `
                        <div class="mt-3">
                            <button class="btn btn-sm btn-outline-primary" onclick="showAddReceiptForm(${index})">
                                <i class="bi bi-upload"></i> Add Receipt
                            </button>
                        </div>` : ''}
                    </div>
                </div>
            `;
        });
        
        projectsList.innerHTML = projectsHtml;
    }
    
    /**
     * Function to show/hide the new project form
     * @param {boolean} show - Whether to show or hide the form
     */
    function toggleNewProjectForm(show = true) {
        const formContainer = document.getElementById('newProjectForm');
        if (show) {
            formContainer.classList.remove('d-none');
            document.getElementById('project_name').focus();
        } else {
            formContainer.classList.add('d-none');
            document.getElementById('projectForm').reset();
        }
    }
    
    /**
     * Function to add a new project (show form)
     */
    function addNewProject() {
        toggleNewProjectForm(true);
    }
    
    /**
     * Function to save a new project
     */
    function saveNewProject() {
        const form = document.getElementById('projectForm');
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        const projectData = {
            name: document.getElementById('project_name').value,
            budget: document.getElementById('project_budget').value,
            description: document.getElementById('project_description').value,
            is_completed: false
        };
        
        const receiptFile = document.getElementById('project_receipt').files[0];
        const formData = new FormData();
        formData.append('project_data', JSON.stringify(projectData));
        if (receiptFile) {
            formData.append('receipt', receiptFile);
        }
        
        fetch(`/api/deals/${currentDealId}/projects/add/`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Project added successfully!');
                toggleNewProjectForm(false);
                fetchDealProjects(currentDealId); // Refresh the projects list
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while adding the project.');
        });
    }
    
    /**
     * Function to remove a project
     * @param {number} index - The index of the project to remove
     */
    function removeProject(index) {
        if (!confirm('Are you sure you want to remove this project?')) {
            return;
        }
        
        const projectId = dealProjects[index].id;
        
        fetch(`/api/deals/${currentDealId}/projects/${projectId}/delete/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Project removed successfully!');
                fetchDealProjects(currentDealId); // Refresh the projects list
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while removing the project.');
        });
    }
    
    /**
     * Function to toggle project completion status
     * @param {number} index - The index of the project to update
     * @param {boolean} isCompleted - The new completion status
     */
    function toggleProjectCompletion(index, isCompleted) {
        const projectId = dealProjects[index].id;
        
        fetch(`/api/deals/${currentDealId}/projects/${projectId}/update/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                is_completed: isCompleted
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                dealProjects[index].is_completed = isCompleted;
                renderProjects(); // Update the UI
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while updating the project.');
        });
    }
    
    /**
     * Function to show form for adding a receipt to an existing project
     * @param {number} index - The index of the project to add receipt to
     */
    function showAddReceiptForm(index) {
        const project = dealProjects[index];
        
        // Create a temporary file input
        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.accept = 'image/*,application/pdf';
        fileInput.onchange = function() {
            if (fileInput.files.length > 0) {
                uploadProjectReceipt(index, fileInput.files[0]);
            }
        };
        fileInput.click();
    }
    
    /**
     * Function to upload a receipt for an existing project
     * @param {number} index - The index of the project
     * @param {File} file - The receipt file to upload
     */
    function uploadProjectReceipt(index, file) {
        const projectId = dealProjects[index].id;
        const formData = new FormData();
        formData.append('receipt', file);
        
        fetch(`/api/deals/${currentDealId}/projects/${projectId}/receipt/`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Receipt uploaded successfully!');
                fetchDealProjects(currentDealId); // Refresh the projects list
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while uploading the receipt.');
        });
    }
    
    /**
     * Function to preview a document in a modal
     * @param {string} documentUrl - URL of the document to preview
     */
    function previewDocument(documentUrl) {
        console.log('Previewing document:', documentUrl);
        
        // Try to create and show the modal
        let previewModal;
        try {
            previewModal = new bootstrap.Modal(document.getElementById('documentPreviewModal'));
        } catch (error) {
            console.error('Error creating document preview modal:', error);
            alert('Could not open document preview. Please check if Bootstrap is properly loaded.');
            return;
        }
        
        const previewContent = document.getElementById('documentPreviewContent');
        const downloadBtn = document.getElementById('downloadDocumentBtn');
        
        // Show loading indicator
        previewContent.innerHTML = `
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading document preview...</p>
            </div>
        `;
        
        // Set download link
        downloadBtn.href = documentUrl;
        
        // Get file name from URL for a better user experience
        const fileName = documentUrl.split('/').pop();
        downloadBtn.setAttribute('download', fileName);
        
        // Determine the document type from the URL
        const fileExtension = documentUrl.split('.').pop().toLowerCase();
        
        // Show the modal before attempting to load content
        previewModal.show();
        
        // Use a timeout to ensure the modal is visible before loading content
        setTimeout(() => {
            try {
                if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExtension)) {
                    // Image preview with error handling
                    const img = new Image();
                    img.onload = function() {
                        previewContent.innerHTML = `
                            <img src="${documentUrl}" class="img-fluid" alt="Document Image">
                        `;
                    };
                    img.onerror = function() {
                        previewContent.innerHTML = `
                            <div class="alert alert-danger">
                                <p>Failed to load image. The file may be missing or corrupted.</p>
                            </div>
                        `;
                    };
                    img.src = documentUrl;
                    
                } else if (fileExtension === 'pdf') {
                    // PDF preview
                    previewContent.innerHTML = `
                        <div class="ratio ratio-16x9" style="height: 600px;">
                            <iframe src="${documentUrl}" allowfullscreen></iframe>
                        </div>
                    `;
                } else {
                    // Other file types that can't be previewed directly
                    previewContent.innerHTML = `
                        <div class="alert alert-info">
                            <p>This file type cannot be previewed directly in the browser.</p>
                            <p>Please use the download button to view the file.</p>
                            <p class="mb-0"><strong>File:</strong> ${fileName}</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error rendering document preview:', error);
                previewContent.innerHTML = `
                    <div class="alert alert-danger">
                        <p>Error displaying document preview: ${error.message}</p>
                    </div>
                `;
            }
        }, 100);
    }
</script>

<!-- File Upload Modal -->
<div class="modal fade" id="fileUploadModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Upload Project Files</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="fileUploadForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="upload_project_select" class="form-label">Select Project</label>
                        <select class="form-select" id="upload_project_select" name="project_id" required>
                            <option value="">Select a project</option>
                            <!-- Projects will be loaded dynamically -->
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="file_description" class="form-label">Description (Optional)</label>
                        <textarea class="form-control" id="file_description" name="description" rows="2" placeholder="Describe the file(s) you're uploading"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="project_files" class="form-label">Files</label>
                        <input type="file" class="form-control" id="project_files" name="files" multiple required>
                        <div class="form-text">
                            You can upload multiple files. Supported formats include documents, images, PDFs, and ZIP archives.
                        </div>
                    </div>
                    <div class="progress mb-3 d-none" id="uploadProgressContainer">
                        <div class="progress-bar" id="uploadProgressBar" role="progressbar" style="width: 0%"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="uploadFilesBtn" onclick="uploadProjectFiles()">Upload Files</button>
            </div>
        </div>
    </div>
</div>

<script>
    /**
     * Function to show the file upload modal
     */
    function showFileUploadModal() {
        // Load projects for the dropdown
        loadProjectsForUpload();
        
        // Show the modal
        const fileUploadModal = new bootstrap.Modal(document.getElementById('fileUploadModal'));
        fileUploadModal.show();
    }
    
    /**
     * Function to load projects for the file upload dropdown
     */
    function loadProjectsForUpload() {
        const projectSelect = document.getElementById('upload_project_select');
        projectSelect.innerHTML = '<option value="">Select a project</option>';
        
        // Show loading indicator
        projectSelect.disabled = true;
        projectSelect.innerHTML += '<option value="" disabled>Loading projects...</option>';
        
        // Fetch projects from API
        fetch(`/api/projects/?username={{ username }}`)
        .then(response => response.json())
        .then(data => {
            projectSelect.innerHTML = '<option value="">Select a project</option>';
            
            if (data.success && data.projects && data.projects.length > 0) {
                // Add projects to dropdown
                data.projects.forEach(project => {
                    projectSelect.innerHTML += `<option value="${project.id}">${project.name} (${project.deal_title})</option>`;
                });
            } else {
                projectSelect.innerHTML += '<option value="" disabled>No projects found</option>';
            }
            
            projectSelect.disabled = false;
        })
        .catch(error => {
            console.error('Error loading projects:', error);
            projectSelect.innerHTML = '<option value="">Error loading projects</option>';
            projectSelect.disabled = false;
        });
    }
    
    /**
     * Function to upload files to a project
     */
    function uploadProjectFiles() {
        const form = document.getElementById('fileUploadForm');
        const formData = new FormData(form);
        const projectId = document.getElementById('upload_project_select').value;
        
        // Form validation
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }
        
        if (!projectId) {
            alert('Please select a project');
            return;
        }
        
        const files = document.getElementById('project_files').files;
        if (files.length === 0) {
            alert('Please select at least one file to upload');
            return;
        }
        
        // Show progress indicators
        const progressContainer = document.getElementById('uploadProgressContainer');
        const progressBar = document.getElementById('uploadProgressBar');
        const uploadBtn = document.getElementById('uploadFilesBtn');
        
        progressContainer.classList.remove('d-none');
        progressBar.style.width = '0%';
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Uploading...';
        
        // Perform the upload
        fetch(`/api/projects/${projectId}/upload/`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Files uploaded successfully!');
                // Close modal and refresh file list
                bootstrap.Modal.getInstance(document.getElementById('fileUploadModal')).hide();
                loadProjects();
                filterProjectFiles();
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while uploading files.');
        })
        .finally(() => {
            // Reset form and UI
            progressContainer.classList.add('d-none');
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = 'Upload Files';
            form.reset();
        });
    }
    
    /**
     * Function to load projects for filtering in the projects tab
     */
    function loadProjects() {
        const projectSelect = document.getElementById('projectSelectFilter');
        
        // Show loading indicator
        projectSelect.disabled = true;
        projectSelect.innerHTML = '<option value="all">All Projects</option><option value="" disabled>Loading projects...</option>';
        
        // Fetch projects from API
        fetch(`/api/projects/?username={{ username }}`)
        .then(response => response.json())
        .then(data => {
            projectSelect.innerHTML = '<option value="all">All Projects</option>';
            
            if (data.success && data.projects && data.projects.length > 0) {
                // Add projects to dropdown
                data.projects.forEach(project => {
                    const dealTitle = project.deal_title || 'Unknown Deal';
                    projectSelect.innerHTML += `<option value="${project.id}">${project.name} (${dealTitle})</option>`;
                });
                
                // Load project files after projects are loaded
                loadProjectFiles();
            } else {
                projectSelect.innerHTML += '<option value="" disabled>No projects found</option>';
                showNoFilesMessage();
            }
            
            projectSelect.disabled = false;
        })
        .catch(error => {
            console.error('Error loading projects:', error);
            projectSelect.innerHTML = '<option value="all">All Projects</option><option value="" disabled>Error loading projects: ' + error.message + '</option>';
            projectSelect.disabled = false;
            showNoFilesMessage();
        });
    }
    
    /**
     * Function to load project files
     */
    function loadProjectFiles() {
        const filesContainer = document.getElementById('projectFilesContainer');
        const loadingElement = document.getElementById('loadingFiles');
        const noFilesMessage = document.getElementById('noFilesMessage');
        const filesList = document.getElementById('projectFilesList');
        
        // Show loading indicator
        loadingElement.style.display = 'block';
        noFilesMessage.style.display = 'none';
        filesList.style.display = 'none';
        
        // Fetch project files from API
        fetch(`/api/projects/files/?username={{ username }}`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.files && data.files.length > 0) {
                // Store files data globally for filtering
                window.projectFilesData = data.files;
                
                // Apply filter based on current selection
                filterProjectFiles();
            } else {
                showNoFilesMessage();
            }
        })
        .catch(error => {
            console.error('Error loading project files:', error);
            showNoFilesMessage();
        })
        .finally(() => {
            loadingElement.style.display = 'none';
        });
    }
    
    /**
     * Function to filter project files based on selected project and search term
     */
    function filterProjectFiles() {
        const projectId = document.getElementById('projectSelectFilter').value;
        const searchTerm = document.getElementById('fileSearchInput').value.toLowerCase();
        const filesTableBody = document.getElementById('filesTableBody');
        const noFilesMessage = document.getElementById('noFilesMessage');
        const filesList = document.getElementById('projectFilesList');
        
        // If no files data loaded yet, show loading
        if (!window.projectFilesData) {
            noFilesMessage.style.display = 'block';
            filesList.style.display = 'none';
            return;
        }
        
        // Filter files based on project and search term
        let filteredFiles = window.projectFilesData;
        
        if (projectId !== 'all') {
            filteredFiles = filteredFiles.filter(file => file.project_id === projectId);
        }
        
        if (searchTerm) {
            filteredFiles = filteredFiles.filter(file => 
                file.filename.toLowerCase().includes(searchTerm) || 
                file.description.toLowerCase().includes(searchTerm)
            );
        }
        
        // Display filtered files
        if (filteredFiles.length === 0) {
            showNoFilesMessage();
            return;
        }
        
        // Build the files table
        filesTableBody.innerHTML = '';
        filteredFiles.forEach(file => {
            const fileSize = formatFileSize(file.size);
            const fileDate = new Date(file.uploaded_at).toLocaleString();
            const fileExt = file.filename.split('.').pop().toLowerCase();
            
            // Determine file icon based on extension
            let fileIcon = 'bi-file';
            if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExt)) {
                fileIcon = 'bi-file-image';
            } else if (fileExt === 'pdf') {
                fileIcon = 'bi-file-pdf';
            } else if (['doc', 'docx'].includes(fileExt)) {
                fileIcon = 'bi-file-word';
            } else if (['xls', 'xlsx'].includes(fileExt)) {
                fileIcon = 'bi-file-excel';
            } else if (['zip', 'rar', '7z'].includes(fileExt)) {
                fileIcon = 'bi-file-zip';
            }
            
            filesTableBody.innerHTML += `
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <i class="bi ${fileIcon} fs-4 me-2 text-primary"></i>
                            <div>
                                <div>${file.filename}</div>
                                <small class="text-muted">${file.description || 'No description'}</small>
                            </div>
                        </div>
                    </td>
                    <td>${file.project_name}</td>
                    <td>${fileDate}</td>
                    <td>${fileSize}</td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="previewFile('${file.url}')"><i class="bi bi-eye"></i></button>
                            <a href="${file.url}" class="btn btn-outline-success" download><i class="bi bi-download"></i></a>
                            <button class="btn btn-outline-danger" onclick="deleteFile('${file.id}')"><i class="bi bi-trash"></i></button>
                        </div>
                    </td>
                </tr>
            `;
        });
        
        // Show the files list
        noFilesMessage.style.display = 'none';
        filesList.style.display = 'block';
    }
    
    /**
     * Function to show a message when no files are found
     */
    function showNoFilesMessage() {
        const loadingElement = document.getElementById('loadingFiles');
        const noFilesMessage = document.getElementById('noFilesMessage');
        const filesList = document.getElementById('projectFilesList');
        
        loadingElement.style.display = 'none';
        noFilesMessage.style.display = 'block';
        filesList.style.display = 'none';
    }
    
    /**
     * Function to format file size in human-readable format
     * @param {number} bytes - File size in bytes
     * @returns {string} - Formatted file size
     */
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    /**
     * Function to preview a file
     * @param {string} fileUrl - URL to the file
     */
    function previewFile(fileUrl) {
        // Create a modal for file preview if it doesn't exist
        if (!document.getElementById('filePreviewModal')) {
            const modalHtml = `
                <div class="modal fade" id="filePreviewModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">File Preview</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body" id="filePreviewContent">
                                <div class="text-center" id="previewLoadingSpinner">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2">Loading preview...</p>
                                </div>
                                <div id="filePreviewContent" class="d-none"></div>
                            </div>
                            <div class="modal-footer">
                                <a id="downloadFileBtn" href="#" class="btn btn-primary" download>
                                    <i class="bi bi-download"></i> Download
                                </a>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = modalHtml;
            document.body.appendChild(tempDiv.firstElementChild);
        }
        
        // Set up the preview based on file type
        const previewModal = new bootstrap.Modal(document.getElementById('filePreviewModal'));
        const previewContent = document.getElementById('filePreviewContent');
        const loadingSpinner = document.getElementById('previewLoadingSpinner');
        const downloadBtn = document.getElementById('downloadFileBtn');
        
        // Reset and prepare the modal
        previewContent.classList.add('d-none');
        loadingSpinner.classList.remove('d-none');
        downloadBtn.href = fileUrl;
        
        // Get file name for better user experience
        const fileName = fileUrl.split('/').pop();
        downloadBtn.setAttribute('download', fileName);
        
        // Show the modal and try to load preview based on file type
        previewModal.show();
        
        const fileExt = fileName.split('.').pop().toLowerCase();
        setTimeout(() => {
            try {
                loadingSpinner.classList.add('d-none');
                previewContent.classList.remove('d-none');
                
                // Handle different file types
                if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExt)) {
                    // Image preview
                    previewContent.innerHTML = `<img src="${fileUrl}" class="img-fluid" alt="Preview">`;
                } else if (fileExt === 'pdf') {
                    // PDF preview
                    previewContent.innerHTML = `<iframe src="${fileUrl}" width="100%" height="600" frameborder="0"></iframe>`;
                } else {
                    // Other file types - show download message
                    previewContent.innerHTML = `
                        <div class="alert alert-info text-center">
                            <i class="bi bi-file-earmark fs-1 mb-3"></i>
                            This file type cannot be previewed directly. Please download the file to view it.
                        </div>
                        <div class="mt-4">
                            <a href="${fileUrl}" class="btn btn-lg btn-primary" download>
                                <i class="bi bi-download me-2"></i> Download File
                            </a>
                        </div>
                    `;
                }
            } catch (error) {
                previewContent.innerHTML = `
                    <div class="alert alert-danger">
                        <p>Error loading preview: ${error.message}</p>
                    </div>
                `;
            }
        }, 500);
    }
    }
    
    /**
     * Function to delete a project file
     * @param {string} fileId - ID of the file to delete
     */
    function deleteFile(fileId) {
        if (!confirm('Are you sure you want to delete this file? This action cannot be undone.')) {
            return;
        }
        
        fetch(`/api/projects/files/${fileId}/delete/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': '{{ csrf_token }}'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('File deleted successfully');
                // Reload files list
                loadProjectFiles();
            } else {
                alert('Error: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error deleting file:', error);
            alert('An error occurred while deleting the file');
        });
    }
    
    /**
     * Function to initialize the create deal form
     */
    function initializeCreateDealForm() {
        // Reset the form
        document.getElementById('createDealForm').reset();
        
        // Reset projects data
        document.getElementById('projects_data').value = '[]';
        
        // Clear projects list
        document.getElementById('projectsList').innerHTML = `
            <div class="alert alert-info">
                <p class="mb-0">Add your first project using the button below.</p>
            </div>
        `;
        
        // Hide projects section initially
        document.getElementById('projectsSection').classList.add('d-none');
        
        // Hide project form
        document.getElementById('addProjectForm').classList.add('d-none');
        
        // Initialize radio buttons (no default checked)
        document.getElementById('single_project').checked = false;
        document.getElementById('multi_project').checked = false;
    }
    
    // currentDealId variable is declared at the beginning of the script
    
    /**
     * Function to load projects for a specific deal
     * @param {string} dealId - ID of the deal to load projects for
     */
    function loadDealProjects(dealId) {
        // Store the current deal ID
        currentDealId = dealId;
        
        // Show loading indicator
        const projectsList = document.getElementById('projectsList');
        projectsList.innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading projects...</span>
                </div>
                <p class="mt-2">Loading projects...</p>
            </div>
        `;
        
        // Fetch projects for the deal
        fetch(`/api/projects/list/?deal_id=${dealId}`)
            .then(response => response.json())
            .then(data => {
                if (data.success && data.projects) {
                    // Render projects
                    renderProjects(data.projects);
                } else {
                    // Show empty state
                    projectsList.innerHTML = `
                        <div class="alert alert-info">
                            <p class="mb-0">No projects found for this deal. Add your first project using the button above.</p>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                projectsList.innerHTML = `
                    <div class="alert alert-danger">
                        <p class="mb-0">Error loading projects. Please try again.</p>
                    </div>
                `;
            });
    }
    
    /**
     * Function to render projects in the project management modal
     * @param {Array} projects - List of projects to render
     */
    function renderProjects(projects) {
        const projectsList = document.getElementById('projectsList');
        
        if (!projects || projects.length === 0) {
            projectsList.innerHTML = `
                <div class="alert alert-info">
                    <p class="mb-0">No projects found for this deal. Add your first project using the button above.</p>
                </div>
            `;
            return;
        }
        
        // Build HTML for projects
        let projectsHtml = '';
        
        projects.forEach(project => {
            // Format deadline
            const deadline = new Date(project.deadline);
            const formattedDeadline = deadline.toLocaleDateString();
            
            // Count files
            const fileCount = project.files ? project.files.length : 0;
            
            projectsHtml += `
                <div class="card mb-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">${project.name}</h6>
                        <div class="btn-group btn-group-sm">
                            <button type="button" class="btn btn-outline-primary" onclick="viewProjectDetails('${project._id}')">View</button>
                            <button type="button" class="btn btn-outline-danger" onclick="deleteProject('${project._id}')">Delete</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p><strong>Supervisor:</strong> ${project.supervisor}</p>
                                <p><strong>Deadline:</strong> ${formattedDeadline}</p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Files:</strong> ${fileCount} file(s)</p>
                                ${project.additional_fee ? `<p><strong>Additional Fee:</strong> $${project.additional_fee}</p>` : ''}
                            </div>
                        </div>
                        ${project.description ? `<p><strong>Description:</strong> ${project.description}</p>` : ''}
                    </div>
                </div>
            `;
        });
        
        projectsList.innerHTML = projectsHtml;
    }
    
    /**
     * Function to save a new project to a verified deal
     */
    function saveNewProject() {
        // Get form values
        const name = document.getElementById('project_name').value.trim();
        const supervisor = document.getElementById('project_supervisor').value;
        const description = document.getElementById('project_description').value.trim();
        const deadline = document.getElementById('project_deadline').value;
        const additionalFee = parseFloat(document.getElementById('project_additional_fee').value) || 0;
        const filesInput = document.getElementById('project_files');
        const receiptInput = document.getElementById('project_receipt_file');
        
        // Validate required fields
        if (!name) {
            alert('Project name is required');
            return;
        }
        
        if (!supervisor) {
            alert('Supervisor is required');
            return;
        }
        
        if (!deadline) {
            alert('Deadline is required');
            return;
        }
        
        // Validate receipt if additional fee is present
        if (additionalFee > 0 && (!receiptInput.files || receiptInput.files.length === 0)) {
            alert('Receipt is required when adding an additional fee');
            return;
        }
        
        // Create FormData for file upload
        const formData = new FormData();
        formData.append('deal_id', currentDealId);
        formData.append('name', name);
        formData.append('supervisor', supervisor);
        formData.append('description', description);
        formData.append('deadline', deadline);
        formData.append('additional_fee', additionalFee);
        
        // Add project files
        if (filesInput && filesInput.files) {
            for (let i = 0; i < filesInput.files.length; i++) {
                const file = filesInput.files[i];
                
                // Validate file type
                const fileExt = file.name.split('.').pop().toLowerCase();
                const validExts = ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'gif', 'zip'];
                
                if (!validExts.includes(fileExt)) {
                    alert(`File type .${fileExt} is not supported. Please upload PDF, DOC, DOCX, images or ZIP files.`);
                    return;
                }
                
                formData.append('files', file);
            }
        }
        
        // Add receipt file if provided
        if (receiptInput && receiptInput.files && receiptInput.files.length > 0) {
            formData.append('receipt', receiptInput.files[0]);
        }
        
        // Show loading indicator
        const saveBtn = document.querySelector('#newProjectForm button.btn-primary');
        const originalBtnText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
        saveBtn.disabled = true;
        
        // Send request to create project
        fetch('/api/projects/create/', {
            method: 'POST',
            body: formData,
            credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Refresh projects list
                alert('Project added successfully');
                toggleNewProjectForm(false);
                loadDealProjects(currentDealId);
            } else {
                alert('Error: ' + (data.error || 'Failed to add project'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while adding the project. Please try again.');
        })
        .finally(() => {
            // Reset button
            saveBtn.innerHTML = originalBtnText;
            saveBtn.disabled = false;
        });
    }
    
    /**
     * Initialize file preview functionality
     */
    function initializeFilePreview() {
        // Create a modal for file preview if it doesn't exist
        if (!document.getElementById('filePreviewModal')) {
            const modalHtml = `
                <div class="modal fade" id="filePreviewModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">File Preview</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body" id="filePreviewContent">
                                <div class="text-center">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p class="mt-2">Loading file preview...</p>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <a href="#" class="btn btn-success" id="fileDownloadBtn" download>
                                    <i class="bi bi-download"></i> Download
                                </a>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = modalHtml;
            document.body.appendChild(tempDiv.firstElementChild);
        }
        
        // Set up the preview based on file type
        const previewModal = new bootstrap.Modal(document.getElementById('filePreviewModal'));
        const previewContent = document.getElementById('filePreviewContent');
        const downloadBtn = document.getElementById('fileDownloadBtn');
        
        // Show loading indicator
        previewContent.innerHTML = `
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading file preview...</p>
            </div>
        `;
        
        // Set download link
        downloadBtn.href = fileUrl;
        
        // Get file name for better user experience
        const fileName = fileUrl.split('/').pop();
        downloadBtn.setAttribute('download', fileName);
        
        // Determine the document type from the URL
        const fileExtension = fileUrl.split('.').pop().toLowerCase();
        
        // Show the modal before attempting to load content
        previewModal.show();
        
        const fileExt = fileName.split('.').pop().toLowerCase();
        setTimeout(() => {
            try {
                if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExt)) {
                    // Image preview
                    previewContent.innerHTML = `<img src="${fileUrl}" class="img-fluid" alt="File Preview">`;
                } else if (fileExt === 'pdf') {
                    // PDF preview
                    previewContent.innerHTML = `
                        <div class="ratio ratio-16x9" style="height: 600px;">
                            <iframe src="${fileUrl}" allowfullscreen></iframe>
                        </div>
                    `;
                } else {
                    // Other file types (non-previewable)
                    previewContent.innerHTML = `
                        <div class="alert alert-info text-center">
                            <i class="bi bi-file-earmark fs-1 mb-3"></i>
                            This file type cannot be previewed directly. Please download the file to view it.
                        </div>
                        <div class="mt-4">
                            <a href="${fileUrl}" class="btn btn-lg btn-primary" download>
                                <i class="bi bi-download me-2"></i> Download File
                            </a>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading preview:', error);
                previewContent.innerHTML = `
                    <div class="alert alert-danger">
                        <p>Error loading preview: ${error.message}</p>
                    </div>
                `;
            }
        }, 500);
    }
    }
    
    /**
     * Function to toggle the receipt requirement based on additional fee
     */
    function toggleReceiptRequirement() {
        const additionalFee = parseFloat(document.getElementById('project_additional_fee').value) || 0;
        const receiptSection = document.getElementById('receipt_file_section');
        const receiptInput = document.getElementById('project_receipt_file');
        
        if (additionalFee > 0) {
            // Show receipt section and make it required when there's an additional fee
            receiptSection.classList.remove('d-none');
            receiptInput.setAttribute('required', 'required');
        } else {
            // Hide receipt section and make it optional when there's no additional fee
            receiptSection.classList.add('d-none');
            receiptInput.removeAttribute('required');
        }
    }
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize file preview functionality
        initializeFilePreview();
        
        // Set up tab change event handlers
        const projectsTab = document.getElementById('projects-tab');
        if (projectsTab) {
            projectsTab.addEventListener('shown.bs.tab', function() {
                loadProjects();
            });
        }
        
        // Set up modal open event to initialize the form
        const createDealModal = document.getElementById('createDealModal');
        if (createDealModal) {
            createDealModal.addEventListener('show.bs.modal', function() {
                initializeCreateDealForm();
            });
        }
    });
</script>

{% endblock %}
